/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quizmanagementsystem;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static quizmanagementsystem.AddSubject.i;
import quizmanagementsystem.entities.Question;
import quizmanagementsystem.entities.Subject;
import utils.Common;

/**
 *
 * @author Hassaan.Siddique
 */
public class AddQuestion extends javax.swing.JPanel {
    List<Subject> subjectList = new ArrayList<>();
    List<String> optionList = new ArrayList<>();
    HashMap<String, Subject> subjectMap = new HashMap<>();
    DefaultComboBoxModel<String> subjectModel = new DefaultComboBoxModel<>();
    DefaultComboBoxModel<String> filterModel = new DefaultComboBoxModel<>();
    static DefaultTableModel tableModel;
    static int i = 1;
    static int selectedRow;
    List<Question> questionList = new ArrayList<>();

    /**
     * Creates new form AddQuestion
     */
    public AddQuestion() {
        initComponents();
        questionList = new Question().getAll();
        tableModel = (DefaultTableModel) questionTable.getModel();
        subjectModel.addElement("Select Subject Name");
        filterModel.addElement("Select Subject Name");
        subjectList = new Subject().getAll();
        for (Subject sub: subjectList) {
            subjectMap.put(sub.getName(), sub);
            subjectModel.addElement(sub.getName());
            filterModel.addElement(sub.getName());
        }
        subjectName.setModel(subjectModel);
        filter.setModel(filterModel);
        for (Question question : questionList){
            addTableRow(question);
        }
        questionTable.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        questionTable = new javax.swing.JTable();
        deleteQuestion = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        updateQuestion = new javax.swing.JButton();
        option2 = new javax.swing.JTextField();
        statement = new javax.swing.JTextField();
        option1 = new javax.swing.JTextField();
        option4 = new javax.swing.JTextField();
        answer = new javax.swing.JTextField();
        option3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        subjectName = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        filter = new javax.swing.JComboBox();
        addQuestion = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        addQuestion1 = new javax.swing.JButton();
        id = new javax.swing.JTextField();

        setBackground(new java.awt.Color(102, 102, 102));
        setPreferredSize(new java.awt.Dimension(1500, 700));
        setLayout(null);

        questionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sr. No", "Statement", "Option 1", "Option 2", "Option 3", "Option 4", "Answer", "Subject Name", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        questionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                questionTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(questionTable);
        if (questionTable.getColumnModel().getColumnCount() > 0) {
            questionTable.getColumnModel().getColumn(8).setResizable(false);
            questionTable.getColumnModel().getColumn(8).setPreferredWidth(0);
        }
        if (questionTable.getColumnModel().getColumnCount() > 0) {
            questionTable.getColumnModel().getColumn(8).setMaxWidth(0);
            questionTable.getColumnModel().getColumn(8).setMinWidth(0);
            questionTable.getColumnModel().getColumn(8).setWidth(0);
            questionTable.getColumnModel().getColumn(8).setPreferredWidth(0);
        }

        add(jScrollPane1);
        jScrollPane1.setBounds(10, 442, 1480, 260);

        deleteQuestion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        deleteQuestion.setText("Delete Question");
        deleteQuestion.setEnabled(false);
        deleteQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteQuestionActionPerformed(evt);
            }
        });
        add(deleteQuestion);
        deleteQuestion.setBounds(1310, 360, 170, 50);

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setText("Filter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(490, 380, 120, 40);

        updateQuestion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        updateQuestion.setText("Update Question");
        updateQuestion.setEnabled(false);
        updateQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateQuestionActionPerformed(evt);
            }
        });
        add(updateQuestion);
        updateQuestion.setBounds(1110, 360, 170, 50);
        add(option2);
        option2.setBounds(1000, 120, 380, 40);

        statement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statementActionPerformed(evt);
            }
        });
        add(statement);
        statement.setBounds(310, 40, 1080, 40);
        add(option1);
        option1.setBounds(310, 120, 380, 40);
        add(option4);
        option4.setBounds(1000, 190, 380, 40);

        answer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerActionPerformed(evt);
            }
        });
        answer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                answerKeyPressed(evt);
            }
        });
        add(answer);
        answer.setBounds(310, 260, 380, 40);
        add(option3);
        option3.setBounds(310, 190, 380, 40);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Option A");
        add(jLabel1);
        jLabel1.setBounds(80, 120, 200, 40);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Question Statement");
        add(jLabel2);
        jLabel2.setBounds(80, 40, 200, 40);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Correct Option");
        add(jLabel3);
        jLabel3.setBounds(80, 260, 200, 40);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Option C");
        add(jLabel4);
        jLabel4.setBounds(80, 190, 200, 40);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Subject Name");
        add(jLabel5);
        jLabel5.setBounds(760, 260, 200, 40);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Option D");
        add(jLabel6);
        jLabel6.setBounds(760, 190, 200, 40);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Option B");
        add(jLabel7);
        jLabel7.setBounds(760, 120, 200, 40);

        subjectName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Subject" }));
        add(subjectName);
        subjectName.setBounds(1000, 260, 380, 40);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Subject Name");
        add(jLabel8);
        jLabel8.setBounds(30, 380, 120, 40);

        filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Subject" }));
        add(filter);
        filter.setBounds(160, 380, 300, 40);

        addQuestion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addQuestion.setText("Add Question");
        addQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuestionActionPerformed(evt);
            }
        });
        add(addQuestion);
        addQuestion.setBounds(920, 360, 170, 50);

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Use single capital character i.e (A, B, C, D).");
        add(jLabel9);
        jLabel9.setBounds(310, 300, 310, 16);

        addQuestion1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        addQuestion1.setText("Reset");
        addQuestion1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addQuestion1ActionPerformed(evt);
            }
        });
        add(addQuestion1);
        addQuestion1.setBounds(730, 360, 170, 50);

        id.setEditable(false);
        id.setEnabled(false);
        id.setVisible(false);
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });
        add(id);
        id.setBounds(20, 0, 6, 22);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteQuestionActionPerformed
        if(isAllFieldsFilled()){
            Question question = new Question();
            question.setId(id.getText());
            question.delete();
            tableModel.removeRow(selectedRow);
            clear();
        } else {
            JOptionPane.showMessageDialog(null, "Please fill all fields.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteQuestionActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(filter.getSelectedIndex() != 0){
            questionList = new Question().getAllBySubject((String) filter.getSelectedItem());
        }else {
            questionList = new Question().getAll();
        }
        tableModel.setRowCount(0);
        questionList.stream().forEach(x -> addTableRow(x));
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void updateQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateQuestionActionPerformed
        if(isAllFieldsFilled()){
            optionList.add(option1.getText());
            optionList.add(option2.getText());
            optionList.add(option3.getText());
            optionList.add(option4.getText());
            Question question = new Question();
            question.setId(id.getText());
            question.setStatement(statement.getText());
            question.setOptions(String.join("~~",optionList));
            question.setAnswer(answer.getText());
            question.setSubjectId((String) subjectName.getSelectedItem());
            question.update();
            updateTableRow(question);
            clear();
        } else {
            JOptionPane.showMessageDialog(null, "Please fill all fields to add new Question.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_updateQuestionActionPerformed

    private void addQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuestionActionPerformed
        if(isAllFieldsFilled()){
            optionList.add(option1.getText());
            optionList.add(option2.getText());
            optionList.add(option3.getText());
            optionList.add(option4.getText());
            Question question = new Question();
            question.setId(Common.generatePrimaryKey());
            question.setStatement(statement.getText());
            question.setOptions(String.join("~~",optionList));
            question.setAnswer(answer.getText());
            question.setSubjectId(subjectMap.get(subjectName.getSelectedItem().toString()).getName());
            question.setDeleted(false);
            question.save();
            clear();
        } else {
            JOptionPane.showMessageDialog(null, "Please fill all fields to add new Question.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_addQuestionActionPerformed

    private void statementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statementActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_statementActionPerformed

    private void answerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_answerKeyPressed
        if((evt.getKeyChar() == 'A' || evt.getKeyChar() == 'B' || evt.getKeyChar() == 'C' || evt.getKeyChar() == 'D' || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE || evt.getKeyChar() == KeyEvent.VK_DELETE) && answer.getText().length() == 0) {
            answer.setEditable(true);
        } else {
            answer.setEditable(false);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_answerKeyPressed

    private void answerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerActionPerformed

    private void addQuestion1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addQuestion1ActionPerformed
        clear();
        // TODO add your handling code here:
    }//GEN-LAST:event_addQuestion1ActionPerformed

    private void questionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_questionTableMouseClicked
        addQuestion.setEnabled(false);
        updateQuestion.setEnabled(true);
        deleteQuestion.setEnabled(true);
        selectedRow = questionTable.getSelectedRow();
        statement.setText((String) questionTable.getValueAt(selectedRow, 1));
        option1.setText((String) questionTable.getValueAt(selectedRow, 2));
        option2.setText((String) questionTable.getValueAt(selectedRow, 3));
        option3.setText((String) questionTable.getValueAt(selectedRow, 4));
        option4.setText((String) questionTable.getValueAt(selectedRow, 5));
        answer.setText((String) questionTable.getValueAt(selectedRow, 6));
        subjectName.setSelectedItem((String) questionTable.getValueAt(selectedRow, 7));
        id.setText((String) questionTable.getValueAt(selectedRow, 8));
        // TODO add your handling code here:
    }//GEN-LAST:event_questionTableMouseClicked

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed


    public void clear(){
        addQuestion.setEnabled(true);
        updateQuestion.setEnabled(false);
        deleteQuestion.setEnabled(false);
        statement.setText("");
        option1.setText("");
        option2.setText("");
        option3.setText("");
        option4.setText("");
        answer.setText("");
        subjectName.setSelectedIndex(0);
        filter.setSelectedIndex(0);
    }
    
     public void addTableRow(Question question){
        List<String> options = new ArrayList<>(Arrays.asList(question.getOptions().split("~~")));
        Vector<Object> row = new Vector<>();
        row.add(i);
        row.add(question.getStatement());
        row.add(options.get(0));
        row.add(options.get(1));
        row.add(options.get(2));
        row.add(options.get(3));
        row.add(question.getAnswer());
        row.add(question.getSubjectId());
        row.add(question.getId());
        tableModel.addRow(row);
        i++;
    }
     
    public void updateTableRow(Question question){
        List<String> options = new ArrayList<>(Arrays.asList(question.getOptions().split("~~")));
        tableModel.setValueAt(question.getStatement(), selectedRow, 1);
        tableModel.setValueAt(options.get(0), selectedRow, 2);
        tableModel.setValueAt(options.get(1), selectedRow, 3);
        tableModel.setValueAt(options.get(2), selectedRow, 4);
        tableModel.setValueAt(options.get(3), selectedRow, 5);
        tableModel.setValueAt(question.getAnswer(), selectedRow, 6);
        tableModel.setValueAt(question.getSubjectId(), selectedRow, 7);
    }
    
    public boolean isAllFieldsFilled(){
        return !Common.isEmptyString(statement.getText()) &&
                !Common.isEmptyString(option1.getText()) &&
                !Common.isEmptyString(option2.getText()) &&
                !Common.isEmptyString(option3.getText()) &&
                !Common.isEmptyString(option4.getText()) &&
                !Common.isEmptyString(answer.getText()) &&
                subjectName.getSelectedIndex() != 0;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addQuestion;
    private javax.swing.JButton addQuestion1;
    private javax.swing.JTextField answer;
    private javax.swing.JButton deleteQuestion;
    private javax.swing.JComboBox filter;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField option1;
    private javax.swing.JTextField option2;
    private javax.swing.JTextField option3;
    private javax.swing.JTextField option4;
    private javax.swing.JTable questionTable;
    private javax.swing.JTextField statement;
    private javax.swing.JComboBox subjectName;
    private javax.swing.JButton updateQuestion;
    // End of variables declaration//GEN-END:variables
}
